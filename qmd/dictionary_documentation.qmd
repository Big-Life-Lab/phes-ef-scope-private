---
title: "dictionary documentation"
format:
  html:
    theme: default
execute-dir: project
params:
  dict_path: "../data_raw/2025_07_15_ScopingReview_ReportedConcepts(terms_main).csv"
---

```{r}
# packages
library(readr)
library(dplyr)
library(stringr)
library(tidyr)   # for replace_na & coalesce
library(purrr)
library(glue)

# read CSV
d <- readr::read_csv(
  file = params$dict_path,
  show_col_types = FALSE,
  col_types = readr::cols(.default = readr::col_character())
) %>%
  dplyr::mutate(dplyr::across(where(is.character), ~ stringr::str_squish(.)))

if (!"delphi_see_also" %in% names(d)) d$delphi_see_also <- NA_character_
d <- d %>%
  mutate(see_also = delphi_see_also)

need <- c("term_name","obo_id","term_label","see_also","scr_def",
          "term_description","term_background","scr_exact_synonym","scr_broad_synonym")
for (c in need) if (!c %in% names(d)) d[[c]] <- NA_character_

d <- d %>%
  select(all_of(need)) %>%
  mutate(across(everything(), ~ replace_na(., "â€“"))) %>%
  arrange(term_name)
#| label: render-dictionary
purrr::pwalk(
  d,
  function(term_name, obo_id, term_label, see_also, scr_def,
           term_description, term_background, scr_exact_synonym, scr_broad_synonym) {

    header <- if (!is.na(term_name) && term_name != "") term_name else term_label

    cat(glue("
## {header}

**ID:** {obo_id}  
**Label:** {term_label}  
**See also:** {see_also}

**Definition**
{scr_def}

**Description**
{term_description}

**Background**
{term_background}

**Synonyms**
- **Exact:** {scr_exact_synonym}  
- **Broad:** {scr_broad_synonym}


---

"))
  }
)


```

