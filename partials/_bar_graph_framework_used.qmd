

```{r}
#| fig-width: 12
#| fig-height: 8
#| out-width: 100%
#| fig-align: center
#| fig-format: svg
#Packages
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)

#extract data
data_fp <- "data_raw/phes_ef_study_data_extraction_clean.csv"
fig_dir <- "figures"
target_col <- "eval_framework_used"

dat <- readr::read_csv(data_fp, show_col_types = FALSE)

nm <- names(dat)
idx <- which(nm == target_col)

col_vec <- dat[[idx]]
tbl <- tibble(raw = as.character(col_vec))

#seperate multipule rows; delete "not applicable"
tbl_long <- tbl %>%
  tidyr::separate_rows(raw, sep = ";\\s*") %>%    
  mutate(
    raw = str_squish(raw),
    raw_low = str_to_lower(raw),
    raw_low = str_remove(raw_low, "^[a-z]\\.[\\s]*")  
  ) %>%
  filter(!str_detect(raw_low, "not applicable"))

# extract framework name
map_to_key <- function(x) {
  case_when(
    str_detect(x, "cdc\\s*1988")                              ~ "CDC1988",
    str_detect(x, "cdc\\s*2001")                              ~ "CDC2001",
    str_detect(x, "cdc\\s*2004")                              ~ "CDC2004",
    str_detect(x, "health\\s*canada.*2004")                   ~ "HEALTH CANADA 2004",
    str_detect(x, "\\bwho\\b\\s*2006")                        ~ "WHO 2006",
    str_detect(x, "ecdc\\s*2014")                             ~ "ECDC2014",
    str_detect(x, "ser\\s*val|serval")                        ~ "SERVAL",
    str_detect(x, "survtool")                                 ~ "Survtool",
    str_detect(x, "\\bsuif\\b|\\bsuf\\b")                     ~ "SuIF",
    str_detect(x, "oasis")                                    ~ "OASIS",
    str_detect(x, "no framework")                             ~ "No framework discussed",
    str_detect(x, "\\bother\\b")                              ~ "Other",
    TRUE ~ NA_character_
  )
}

x_order <- c(
  "CDC1988","CDC2001","CDC2004","HEALTH CANADA 2004","WHO 2006",
  "ECDC2014","SERVAL","Survtool","SuIF","OASIS","Other","No framework discussed"
)

counts <- tbl_long %>%
  mutate(key = map_to_key(raw_low)) %>%
  filter(!is.na(key)) %>%
  count(key, name = "count")

# Fill in missing categories with 0 and set the display order.
counts_all <- tibble(key = x_order) %>%
  left_join(counts, by = "key") %>%
  mutate(count = coalesce(count, 0L),
         key = factor(key, levels = x_order, ordered = TRUE))

# draw bar graph
max_y <- max(counts_all$count, na.rm = TRUE)
p <- ggplot(counts_all, aes(x = key, y = count)) +
  geom_col(width = 0.8, fill = "#2B83BA") +  
  geom_text(aes(label = count), vjust = -0.35, size = 4) +
  labs(
    title = "Figure x: Framework used to evaluate surveillance systems",  
    x = NULL, y = "Number of studies"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x  = element_text(angle = 60, vjust = 1, hjust = 1),
    panel.grid.x = element_blank(),
    plot.title   = element_text(hjust = 0.5, face = "bold")  
    # plot.title.position = "plot" 
  ) +
  coord_cartesian(ylim = c(0, max_y * 1.15), clip = "off")
p
#save the bar graph
ggsave(file.path(fig_dir, "bar_graph_framework_used.png"), p,
       width = 10, height = 6, units = "in", dpi = 300)

```

